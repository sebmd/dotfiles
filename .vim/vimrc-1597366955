" zn - rozwija wszystkie zagnieżdżenia
" zm - zwija wszystkie zagnieżdzenia
" za - zwija / rozwija jedno zagnieżdżenie
" --- Pluginy {{{
call plug#begin('~/.vim/plugged')
    Plug 'gruvbox-community/gruvbox'
    Plug 'pearofducks/ansible-vim'
    Plug 'sainnhe/gruvbox-material'
    Plug 'chriskempson/base16-vim'
    Plug 'flazz/vim-colorschemes'
    Plug 'Taverius/vim-colorscheme-manager'
    Plug 'xolox/vim-misc'               " wymagany dle pluginu vim-colorscheme-switcher
    Plug 'xolox/vim-colorscheme-switcher'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'chengzeyi/fzf-preview.vim'
    Plug 'mbbill/undotree'
    Plug 'mhinz/vim-startify'
    Plug 'preservim/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'  " integracja NERDTree z GIT
    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/limelight.vim'
    Plug 'junegunn/vim-markdown-toc'
    Plug 'vimwiki/vimwiki'
    Plug 'junegunn/vim-peekaboo'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-unimpaired'
    Plug 'junegunn/gv.vim'
    Plug 'rhysd/git-messenger.vim'
    Plug 'mhinz/vim-signify'
    Plug 'jiangmiao/auto-pairs'
    Plug 'liuchengxu/vim-which-key'
    Plug 'mcchrish/nnn.vim'
    Plug 'unblevable/quick-scope'
    Plug 'easymotion/vim-easymotion'
    Plug 'Yggdroot/indentLine'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
call plug#end()
" --- Pluginy }}}
" --- Ustawienia {{{
set nocompatible                " wyłączenie wstecznej kompatybilności z edytorem vi
syntax on                       " podkreślanie składni
set nu rnu                      " number, relativenumber
set ts=4 sw=4 sts=4 et sta      " tabstop, shiftwidth, softtabstop, expandtab, smarttab
set wildmenu
set wildmode=list:longest,full
set foldmethod=marker
set splitright
set splitbelow
set backspace=indent,eol,start
set clipboard=unnamedplus
set hidden
set noshowmode
set nowrap
set smartcase
set incsearch
set undodir=~/.vim/undo
set undofile
set undolevels=10000
set viminfo+=n~/.vim/viminfo/viminfo
set laststatus=2
set cmdheight=2
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set listchars=nbsp:⦸
set listchars+=tab:▸\ ,
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=trail:•
set listchars+=eol:¬
set fillchars+=vert:\ 
set showbreak=↪
set scrolloff=5
set autochdir
setlocal spelllang=pl
set lazyredraw  " szybciej wykonuje makra
set encoding=utf-8
set textwidth=80
set cursorline
set colorcolumn=+1
set background=dark
silent! colorscheme gruvbox
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_invert_selection='0'
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
let ayucolor="dark"   " for dark version of theme

set termguicolors
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:airline_theme='lucius'

let g:netrw_browse_split=2
let g:netrw_banner=0
let g:netrw_winsize=25
" --- Ustawienia }}}
" --- Ustawienia plugiów {{{
" Startify
let g:startify_session_dir = '~/.vim/startify_session'

let g:startify_custom_header = ''

let g:startify_lists = [
    \ { 'type': 'files',     'header': ['   MRU']            },
    \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
    \ { 'type': 'sessions',  'header': ['   Sessions']       },
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
    \ { 'type': 'commands',  'header': ['   Commands']       },
    \ ]

let g:startify_commands = [
    \ { 'c': [ 'Current Directory', 'e .' ]          },
    \ { 'v': [ 'VIMRC'            , 'e $MYVIMRC' ]   },
    \ { 'b': [ 'Bashrc'           , 'e ~/.bashrc' ]  },
    \ { 'a': [ 'Aliases'          , 'e ~/.aliases' ] },
    \ ]

let g:startify_custom_header = [
    \ '   Siema, Ziom :) ',
    \ '--------------------------'
    \ ]

" indentLine
let g:indentLine_first_char = ''
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" nnn
" Disable default mappings
let g:nnn#set_default_mappings = 0

" NERDTree
"autocmd vimenter * NERDTree  " uruchomienie przy starcie NERDTree

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" let g:NERDTreeDirArrowExpandable = ''
" let g:NERDTreeDirArrowCollapsible = ''

let g:NERDTreeShowHidden = 1
let g:NERDTreeNaturalSort = 1
let g:NERDTreeBookmarkFile = '$HOME/.vim/NERDTreeBookmarks'
let g:NERDTreeQuitOnOpen = 3
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeWinPos = 'left'
let g:NERDTreeWinSize = 33
let g:NERDTreeAutoDeleteBuffer=1

" NERDTree-GIT
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Ignored"   : "☒",
    \ "Unknown"   : "?"
    \ }

" Vimwiki
let wiki = {}
let wiki.path = '~/vimwiki'
let wiki.ext = '.md'
let wiki.syntax = 'markdown'
let wiki.nested_syntax = { 'python': 'python', 'sh': 'sh' }

let g:vimwiki_list = [wiki]
let g:vimwiki_table_mappings = 0
let g:vimwiki_listsyms = '✗○◐●✓'

" vim-which-key
silent! call which_key#register('\', "g:which_key_map")
silent! call which_key#register(' ', "g:space_prefix_dict")

nnoremap <silent> \ :<c-u>WhichKey '\'<cr>
vnoremap <silent> \ :<c-u> :silent WhichKeyVisual '\'<cr>

let g:which_key_map = {}

hi default link WhichKey            Operator
hi default link WhichKeySeparator   DiffAdded
hi default link WhichKeyGroup       Identifier
hi default link WhichKeyDesc        Function
" --- Ustawienia plugiów }}}
" --- Mapowanie klawiszy {{{
let mapleader="\<space>"    " ustawiona spacja jako klawisz leader
let localmapleader="\\"     " klawisz \ ustawiony jako local leader

nnoremap th :set hlsearch!<cr>
nnoremap j gj
nnoremap k gk
nnoremap gh 0
nnoremap gl $
nnoremap J maJ`a
nnoremap Y y$
nnoremap n nzz
nnoremap N Nzz
nnoremap qq :q<cr>
nnoremap qs :update<cr>:q<cr>

nmap gj <plug>(signify-next-hunk)
nmap gk <plug>(signify-prev-hunk)
nmap gJ 9999gj
nmap gK 9999gk

nnoremap <c-_> :Commentary<cr> " <c-_> mapuje kombinacje klawiszy <c-/>
vnoremap <c-_> :Commentary<cr> " <c-_> mapuje kombinacje klawiszy <c-/>

nnoremap <tab> :e #<cr>

cmap <c-h> <left>
cmap <c-j> <down>
cmap <c-k> <up>
cmap <c-l> <right>

inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>

inoremap <c-c> <esc>

nmap <c-h> <c-w><c-h>
nmap <c-j> <c-w><c-j>
nmap <c-k> <c-w><c-k>
nmap <c-l> <c-w><c-l>

nnoremap <leader>; :

nnoremap <leader>w :update<cr>

" Przełączanie się pomiędzy buforami
nnoremap <leader>, :bp<cr>
nnoremap <leader>. :bn<cr>
" ustawia podzielone okno na główne (full screen)
nnoremap <leader>o :only<cr>

" przechodzi do katalogu w którym znajduje się edytowany plik
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" klonuje paragraf
nnoremap <leader>cp yap<S-}>p

nnoremap <leader>pa :set invpaste paste?<cr>

nnoremap <leader>v :e $MYVIMRC<cr>
" nnoremap <leader>vv :NERDTreeToggle ~/.vim<cr>

nnoremap <leader>r :source $MYVIMRC<cr>:echom "Konfiguracja została przeładowana ..."<cr>

nnoremap <leader>s :setlocal spell! spell? spelllang=pl<cr>

" otwera menadżer plików dla lokalizacji otwartego pliku
nnoremap <leader>f :sv %:p:h<cr>

nnoremap <leader>u :UndotreeToggle<cr>

nnoremap <leader>t :term<cr>
nnoremap <leader>tv :botright vertical terminal<cr>

" Otwiera i zamyka NERDTreee w bieżącej lokalizacji
" nnoremap <silent> <expr> <leader>N g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"

nnoremap <leader>n :NERDTreeToggleVCS<cr>
nnoremap <leader>N :NnnPicker '%:p:h'<cr>

" kopiuje bieżącą linię i uruchamia jako polecenie systemowe, wynik wkleja do
" bufora
nnoremap <leader>E !!$SHELL<cr>

" kopiuje bieżącą linię i wykonuje w linii komend Vim np. :qa!
nnoremap <leader>ve yy:@"<cr>

nnoremap <leader>e :exe "e ~/notes/".strftime("%F").".md"<cr>

" Obsługa luginu vim-surround
" <leader>sw czeka na wprowadzenie znaku, którym otoczy wyraz
noremap <leader>sw :norm ysiw
" <leader>sW czeka na wprowadzenie znaku, którym otoczy WYRAZ
noremap <leader>sW :norm ysiW
" <leader>sp czeka na wprowadzenie znaku, który otoczy paragraf
noremap <leader>sp :norm ysip
" <leader>ss czeka na wprowadzenie znaku, którym otoczy linię
noremap <leader>ss :norm yss
" <leader>sd czeka na wprowadzenie znaku, którym zostanie usunięty
noremap <leader>sd :norm ds

" \fnn wyświetala pełną ścieżkę dla pliku wraz z jego nazwą
nnoremap <localleader>f :echo expand("%:p")<cr>

" kopiuj / wklej do schowka systemowego
vnoremap <c-c> "*y :let @+=@*<cr>
nnoremap <c-c> "*y :let @+=@*<cr>
map <c-p> "+P

command Q :q!

autocmd Filetype markdown,vimwiki inoremap ,i <esc>:InsertLogEntry<cr>

autocmd Filetype help nnoremap <leader>l <c-]>
autocmd Filetype help nnoremap <leader>h <c-t>

" Pierwsze mapowanie dla '\'
let g:which_key_map['/'] = [ 'Commentary'         , 'comment'         ]
let g:which_key_map[';'] = [ ':Commands'          , 'commands'        ]
let g:which_key_map['='] = [ '<C-W>='             , 'balance windows' ]
let g:which_key_map['S'] = [ ':Startify'          , 'start screen'    ]
let g:which_key_map['T'] = [ ':Rg'                , 'search text'     ]
let g:which_key_map['N'] = [ ':NnnPicker'         , 'nnn n³'          ]
let g:which_key_map['n'] = [ ':NERDTreeToggleVCS' , 'NERDTree'        ]
let g:which_key_map['f'] = [ ':Files'             , 'search files'    ]
let g:which_key_map['h'] = [ '<C-W>s'             , 'split below'     ]
let g:which_key_map['v'] = [ '<C-W>v'             , 'split right'     ]
let g:which_key_map['z'] = [ 'Goyo'               , 'zen'             ]
let g:which_key_map['q'] = [ 'q'                  , 'quit vim'        ]
let g:which_key_map['x'] = [ 'x'                  , 'save & quit vim' ]

" t - toggle
" d - dot.files
" s - search
" g - git
" w - windows
" b - buffers

" d dot.files
let g:which_key_map.d = {
    \ 'name' : '+dot.files',
    \ 'v' : [':e $MYVIMRC'                      , 'vimrc'               ],
    \ 'b' : [':e ~/.bashrc'                     , 'bashrc'              ],
    \ 'z' : [':e ~/.zshrc'                      , 'zshrc'               ],
    \ }

let g:which_key_map.t = {
    \ 'name' : '+toggle',
    \ 'p' : [':set paste!'             , 'toggle paste'             ],
    \ 's' : [':Startify'               , 'Startify'                 ],
    \ 'n' : [':set nonumber!'          , 'line-numbers'             ],
    \ 'r' : [':set norelativenumber!'  , 'relative line nums'       ],
    \ 'P' : [':let @/ = ""'            , 'remove search highlight'  ],
    \ }

let g:which_key_map.s = {
    \ 'name' : '+search',
    \ '/' : [':History/'     , 'history'            ],
    \ ';' : [':Commands'     , 'commands'           ],
    \ 'a' : [':Ag'           , 'text Ag'            ],
    \ 'b' : [':BLines'       , 'current buffer'     ],
    \ 'B' : [':Buffers'      , 'open buffers'       ],
    \ 'c' : [':Commits'      , 'commits'            ],
    \ 'C' : [':BCommits'     , 'buffer commits'     ],
    \ 'f' : [':Files'        , 'files'              ],
    \ 'g' : [':GFiles'       , 'git files'          ],
    \ 'G' : [':GFiles?'      , 'modified git files' ],
    \ 'h' : [':History'      , 'file history'       ],
    \ 'H' : [':History:'     , 'command history'    ],
    \ 'l' : [':Lines'        , 'lines'              ],
    \ 'm' : [':Marks'        , 'marks'              ],
    \ 'M' : [':Maps'         , 'normal maps'        ],
    \ 'p' : [':Helptags'     , 'help tags'          ],
    \ 'P' : [':Tags'         , 'project tags'       ],
    \ 's' : [':Snippets'     , 'snippets'           ],
    \ 'S' : [':Colors'       , 'color schemes'      ],
    \ 't' : [':Rg'           , 'text Rg'            ],
    \ 'T' : [':BTags'        , 'buffer tags'        ],
    \ 'w' : [':Windows'      , 'search windows'     ],
    \ 'y' : [':Filetypes'    , 'file types'         ],
    \ 'z' : [':FZF'          , 'FZF'                ],
    \ }

let g:which_key_map.g = {
    \ 'name' : '+git',
    \ 'a' : [':Git add .'                     , 'add all'               ],
    \ 'A' : [':Git add %'                     , 'add current'           ],
    \ 'b' : [':Git blame'                     , 'blame'                 ],
    \ 'B' : [':GBrowse'                       , 'browse'                ],
    \ 'c' : [':Git commit -m "autocommit"'    , 'commit'                ],
    \ 'd' : [':Git diff'                      , 'diff'                  ],
    \ 'D' : [':Gdiffsplit'                    , 'diff split'            ],
    \ 'g' : [':GGrep'                         , 'git grep'              ],
    \ 'G' : [':Gstatus'                       , 'status'                ],
    \ 'h' : [':GitGutterLineHighlightsToggle' , 'highlight hunks'       ],
    \ 'H' : ['<Plug>(GitGutterPreviewHunk)'   , 'preview hunk'          ],
    \ 'j' : ['<Plug>(GitGutterNextHunk)'      , 'next hunk'             ],
    \ 'k' : ['<Plug>(GitGutterPrevHunk)'      , 'prev hunk'             ],
    \ 'l' : [':Git log'                       , 'log'                   ],
    \ 'p' : [':Git push'                      , 'push'                  ],
    \ 'P' : [':Git pull'                      , 'pull'                  ],
    \ 'r' : [':GRemove'                       , 'remove'                ],
    \ 's' : ['<Plug>(GitGutterStageHunk)'     , 'stage hunk'            ],
    \ 't' : [':GitGutterSignsToggle'          , 'toggle signs'          ],
    \ 'u' : ['<Plug>(GitGutterUndoHunk)'      , 'undo hunk'             ],
    \ 'v' : [':GV'                            , 'view commits'          ],
    \ 'V' : [':GV!'                           , 'view buffer commits'   ],
    \ }

let g:which_key_map['w'] = {
    \ 'name' : '+windows' ,
    \ 'w' : ['<C-W>w'     , 'other-window'          ],
    \ 'd' : ['<C-W>c'     , 'delete-window'         ],
    \ '-' : ['<C-W>s'     , 'split-window-below'    ],
    \ '|' : ['<C-W>v'     , 'split-window-right'    ],
    \ '2' : ['<C-W>v'     , 'layout-double-columns' ],
    \ 'h' : ['<C-W>h'     , 'window-left'           ],
    \ 'j' : ['<C-W>j'     , 'window-below'          ],
    \ 'l' : ['<C-W>l'     , 'window-right'          ],
    \ 'k' : ['<C-W>k'     , 'window-up'             ],
    \ 'H' : ['<C-W>5<'    , 'expand-window-left'    ],
    \ 'J' : ['resize +5'  , 'expand-window-below'   ],
    \ 'L' : ['<C-W>5>'    , 'expand-window-right'   ],
    \ 'K' : ['resize -5'  , 'expand-window-up'      ],
    \ '=' : ['<C-W>='     , 'balance-window'        ],
    \ 's' : ['<C-W>s'     , 'split-window-below'    ],
    \ 'v' : ['<C-W>v'     , 'split-window-below'    ],
    \ '?' : ['Windows'    , 'fzf-window'            ],
    \ }

let g:which_key_map.b = {
    \ 'name' : '+buffer' ,
    \ '1' : ['b1'        , 'buffer 1'           ],
    \ '2' : ['b2'        , 'buffer 2'           ],
    \ 'd' : ['bd'        , 'delete-buffer'      ],
    \ 'f' : ['bfirst'    , 'first-buffer'       ],
    \ 'h' : ['Startify'  , 'home-buffer'        ],
    \ 'l' : ['blast'     , 'last-buffer'        ],
    \ 'n' : ['bnext'     , 'next-buffer'        ],
    \ 'p' : ['bprevious' , 'previous-buffer'    ],
    \ '?' : ['Buffers'   , 'fzf-buffer'         ],
    \ }
" --- Mapowanie klawiszy }}}
" --- Autocmd / Funkcje {{{
autocmd BufWinLeave ?* mkview
autocmd BufWinEnter ?* silent loadview

" przeładowanie .vimrc po zapisaniu pliku
autocmd! BufWritePost $MYVIMRC source % | redraw

" Modyfikacja komendy Rg z pluginem FZF.vim
" Przeszukiwanie zawartości plików
function! RgFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

" Modyfikacja komendy Rg dla $NOTES_DIR z pluginem FZF.vim
" Przeszukiwanie zawartości plików
function! RgNotes(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s $HOME/notes || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

function InsertLogEntry()
    normal! o# <temat> <data>
    execute ':s/<data>/\=strftime("%Y-%m-%d %H:%M:%S")/'
    normal! 0f<d7l
    execute ':startinsert'
endfunction

function! FileTime()
    let filename=expand('%:p')
    let msg=""
    let msg=msg."Mod: ".strftime("%F %T",getftime(filename))." ".filename
    echom msg
endfunction

function! CurTime()
    let ftime=""
    let ftime=ftime." ".strftime("Teraz jest: %F %T")
    echom ftime
    " return ftime
endfunction

" FZF z podglądem zawartości pliku
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

" FZF w $NOTES_DIR z podglądem zawartości pliku
command! -bang -nargs=? -complete=dir Notes
    \ call fzf#vim#files('$HOME/notes', fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline', '--prompt=Notes> ']}), <bang>0)

command! -bang -nargs=* RgFzf call RgFzf(<q-args>, <bang>0)

command! -bang -nargs=* RgNotes call RgNotes(<q-args>, <bang>0)

" FZF bez podglądu zawartości pliku
command! -bang -nargs=* -complete=dir LS
    \ call fzf#run(fzf#wrap({'source': 'ls', 'dir': <q-args>}, <bang>0))

command! InsertLogEntry call InsertLogEntry()
command! Log :e ~/notes/log.md
command! FileTime call FileTime()
command! CurTime call CurTime()
command! PI :PlugInstall
" --- Autocmd / Funkcje }}}
" --- Dodatkowe pliki konfiguracyjne {{{
" jeśli istnieje plik ~/.vimrc.local to odczytuje jego zawartość
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" jeśli istnieje plik ~/.vim/vimrc.local to odczytuje jego zawartość
if filereadable(expand("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif
" --- Dodatkowe pliki konfiguracyjne }}}
