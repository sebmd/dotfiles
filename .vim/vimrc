" zn - rozwija zagnieżdżenia
" zm - zwija zagnieżdzenia
" --- Pluginy {{{
call plug#begin('~/.vim/plugged')
    Plug 'gruvbox-community/gruvbox'
    Plug 'sainnhe/gruvbox-material'
    Plug 'nightsense/cosmic_latte'
    Plug 'chriskempson/base16-vim'
    Plug 'flazz/vim-colorschemes'
    Plug 'Taverius/vim-colorscheme-manager'
    Plug 'xolox/vim-misc'
    Plug 'xolox/vim-colorscheme-switcher'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'chengzeyi/fzf-preview.vim'
    Plug 'mbbill/undotree'
    Plug 'junegunn/seoul256.vim'
    Plug 'mhinz/vim-startify'
    Plug 'Shougo/vimfiler.vim'
    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/limelight.vim'
    Plug 'junegunn/vim-markdown-toc'
    Plug 'junegunn/vim-peekaboo'
    Plug 'Shougo/unite.vim'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-unimpaired'
    Plug 'junegunn/gv.vim'
    Plug 'rhysd/git-messenger.vim'
    Plug 'mhinz/vim-signify'
    Plug 'unblevable/quick-scope'
    Plug 'Yggdroot/indentLine'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
call plug#end()
" --- Pluginy }}}
" --- Ustawienia {{{
set nocompatible            " wyłączenie wstecznej kompatybilności z edytorem vi
syntax on
set number
set relativenumber
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set wildmenu
set wildmode=list:longest,full
set foldmethod=marker
set splitright
set splitbelow
set backspace=indent,eol,start
set clipboard=unnamedplus
set hidden
set noshowmode
set nowrap
set smartcase
set incsearch
set undodir=~/.vim/undo
set undofile
set undolevels=10000
set viminfo+=n~/.vim/tmp/viminfo/viminfo
set laststatus=2
set cmdheight=2
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set listchars=nbsp:⦸
set listchars+=tab:▸\ ,
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=trail:•
set listchars+=eol:¬
set fillchars+=vert:\ 
set showbreak=↪
set scrolloff=5
set autochdir
setlocal spelllang=pl
set lazyredraw  " szybciej wykonuje makra
set encoding=utf-8
set textwidth=80
set cursorline
set colorcolumn=+1
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_invert_selection='0'
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
let ayucolor="dark"   " for dark version of theme

set termguicolors
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:airline_theme='lucius'

let g:netrw_browse_split=2
let g:netrw_banner=0
let g:netrw_winsize=25
" --- Ustawienia }}}
" --- Mapowanie klawiszy {{{
let mapleader="\<space>"    " ustawiona spacja jako klawisz leader
let localmapleader="\\"     " klawisz \ ustawiony jako local leader

nnoremap th :set hlsearch!<cr>
nnoremap j gj
nnoremap k gk
nnoremap gh 0
nnoremap gl $
nnoremap J maJ`a
nnoremap Y y$
nnoremap n nzz
nnoremap N Nzz
nnoremap qq :q<cr>
nnoremap qs :update<cr>:q<cr>

nmap gj <plug>(signify-next-hunk)
nmap gk <plug>(signify-prev-hunk)
nmap gJ 9999gj
nmap gK 9999gk

nnoremap <c-_> :Commentary<cr> " <c-_> mapuje kombinacje klawiszy <c-/>
vnoremap <c-_> :Commentary<cr> " <c-_> mapuje kombinacje klawiszy <c-/>

nnoremap <tab> :e #<cr>

cmap <c-h> <left>
cmap <c-j> <down>
cmap <c-k> <up>
cmap <c-l> <right>

inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>

inoremap <c-c> <esc>

nmap <c-h> <c-w><c-h>
nmap <c-j> <c-w><c-j>
nmap <c-k> <c-w><c-k>
nmap <c-l> <c-w><c-l>

nnoremap <leader>; :

" Przełączanie się pomiędzy buforami
nnoremap <leader>, :bp<cr>
nnoremap <leader>. :bn<cr>
" ustawia podzielone okno na główne (full screen)
nnoremap <leader>o :only<cr>

" przechodzi do katalogu w którym znajduje się edytowany plik
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" klonuje paragraf
nnoremap <leader>cp yap<S-}>p

nnoremap <leader>pa :set invpaste paste?<cr>

nnoremap <leader>v :e $MYVIMRC<cr>

nnoremap <leader>r :source $MYVIMRC<cr>:echom "Konfiguracja została przeładowana ..."<cr>

nnoremap <leader>s :setlocal spell! spell? spelllang=pl<cr>

" otwera menadżer plików dla lokalizacji otwartego pliku
nnoremap <leader>f :sv %:p:h<cr>

nnoremap <leader>u :UndotreeToggle<cr>

nnoremap <leader>t :term<cr>
nnoremap <leader>tv :botright vertical terminal<cr>

" kopiuje bieżącą linię i uruchamia jako polecenie systemowe, wynik wkleja do
" bufora
nnoremap <leader>e !!$SHELL<cr>

" kopiuje bieżącą linię i wykonuje w linii komend Vim np. :qa!
nnoremap <leader>ve yy:@"<cr>

nnoremap <leader>n :exe "e ~/notes/".strftime("%F").".md"<cr>

" Obsługa luginu vim-surround
" <leader>sw czeka na wprowadzenie znaku, którym otoczy wyraz
noremap <leader>sw :norm ysiw
" <leader>sW czeka na wprowadzenie znaku, którym otoczy WYRAZ
noremap <leader>sW :norm ysiW
" <leader>ss czeka na wprowadzenie znaku, którym otoczy linię
noremap <leader>ss :norm yss
" <leader>sd czeka na wprowadzenie znaku, którym zostanie usunięty
noremap <leader>sd :norm ds

" \fnn wyświetala pełną ścieżkę dla pliku wraz z jego nazwą
nnoremap <localleader>f :echo expand("%:p")<cr>

" kopiuj / wklej do schowka systemowego
vnoremap <c-c> "*y :let @+=@*<cr>
nnoremap <c-c> "*y :let @+=@*<cr>
map <c-p> "+P

command Q :q!

autocmd Filetype markdown imap ,i <esc>:InsertLogEntry<cr>

autocmd Filetype help nnoremap <leader>l <c-]>
autocmd Filetype help nnoremap <leader>h <c-t>
" --- Mapowanie klawiszy }}}
" --- Autocmd / Funkcje {{{
autocmd BufWinLeave ?* mkview
autocmd BufWinEnter ?* silent loadview

" przeładowanie .vimrc po zapisaniu pliku
autocmd! BufWritePost $MYVIMRC source % | redraw

" Modyfikacja komendy Rg z pluginem FZF.vim
" Przeszukiwanie zawartości plików
function! RgFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

" Modyfikacja komendy Rg dla $NOTES_DIR z pluginem FZF.vim
" Przeszukiwanie zawartości plików
function! RgNotes(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s $HOME/notes || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

function InsertLogEntry()
    normal! o# <temat> <data>
    execute ':s/<data>/\=strftime("%Y-%m-%d %H:%M:%S")/'
    normal! 0f<d7l
    execute ':startinsert'
endfunction

function! FileTime()
  let filename=expand('%:p')
  let msg=""
  let msg=msg."Mod: ".strftime("%F %T",getftime(filename))." ".filename
  echom msg
endfunction

function! CurTime()
  let ftime=""
  let ftime=ftime." ".strftime("Teraz jest: %F %T")
  echom ftime
  " return ftime
endfunction

" FZF z podglądem zawartości pliku
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

" FZF w $NOTES_DIR z podglądem zawartości pliku
command! -bang -nargs=? -complete=dir Notes
    \ call fzf#vim#files('$HOME/notes', fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline', '--prompt=Notes> ']}), <bang>0)

command! -bang -nargs=* RgFzf call RgFzf(<q-args>, <bang>0)

command! -bang -nargs=* RgNotes call RgNotes(<q-args>, <bang>0)

" FZF bez podglądu zawartości pliku
command! -bang -nargs=* -complete=dir LS
    \ call fzf#run(fzf#wrap({'source': 'ls', 'dir': <q-args>}, <bang>0))

command! InsertLogEntry call InsertLogEntry()
command! Log :e ~/notes/log.md
command! FileTime call FileTime()
command! CurTime call CurTime()
" --- Autocmd / Funkcje }}}
" --- Ustawienia plugiów {{{
" Startify
let g:startify_session_dir = '~/.vim/startify_session'

let g:startify_custom_header = ''

let g:startify_lists = [
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]

let g:startify_commands = [
    \ {'c': ['Current Directory', 'e .']},
    \ {'v': ['VIMRC', 'e $MYVIMRC']},
    \ {'b': ['Bashrc', 'e ~/.bashrc']},
    \ {'a': ['Aliases', 'e ~/.aliases']},
    \ ]

let g:indentLine_first_char = ''
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" --- Ustawienia plugiów }}}
" --- Dodatkowe pliki konfiguracyjne {{{
" jeśli istnieje plik ~/.vimrc.local to odczytuje jego zawartość
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" jeśli istnieje plik ~/.vim/vimrc.local to odczytuje jego zawartość
if filereadable(expand("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif
" --- Dodatkowe pliki konfiguracyjne }}}
